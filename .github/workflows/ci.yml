name: CI/CD Pipeline using github-hosted runner

on:
  push:
    branches:
      - main

env:
  REMOTE_PATH: /home/${{ secrets.USER_NAME }}/myapp
  IMAGE_NAME: my-cv:latest
  CONTAINER_NAME: my-cv-container
  SERVE_PORT: 80

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH agent and load private key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Ensure rsync is installed
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Sync repo to remote server
        run: |
          rsync -az --delete --exclude='.git' -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" . \
          ${{ secrets.USER_NAME }}@${{ secrets.SERVER_IP }}:${{ env.REMOTE_PATH }}

      - name: Build image & run container on remote
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.USER_NAME }}@${{ secrets.SERVER_IP }} "\
            set -e && \
            cd ${{ env.REMOTE_PATH }} && \
            docker build -t ${{ env.IMAGE_NAME }} . && \
            if [ \"\$(docker ps -q -f name=${{ env.CONTAINER_NAME }})\" ]; then \
              docker stop ${{ env.CONTAINER_NAME }} && docker rm ${{ env.CONTAINER_NAME }}; \
            fi && \
            docker run -d -p ${{ env.SERVE_PORT }}:80 --name ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }} \
          "

      - name: Test deployment on remote
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.USER_NAME }}@${{ secrets.SERVER_IP }} "\
            curl -s http://localhost:${{ env.SERVE_PORT }} | grep -q 'CV' || \
            (echo 'REMOTE TEST FAILED' && exit 1) \
          "
